apiVersion: v1
kind: ConfigMap
metadata:
  name: neuron-vllm-scripts
  namespace: neuron-inference
data:
  start_vllm.sh: |
    #!/bin/bash
    set -e

    #
    export HF_TOKEN=your_huggingface_token_here
    export HF_MODEL_ID=deepseek-ai/DeepSeek-R1-Distill-Llama-70B
    HF_DRAFT_MODEL_ID=meta-llama/Llama-3.2-1B-Instruct   
     
    # Model paths
    MODEL_PATH="/shared/models/Llama-3.3-70B-Instruct/"
    COMPILED_MODEL_PATH="/shared/traced_model/Llama-3.3-70B-Instruct/"
    
    export VLLM_NEURON_FRAMEWORK="neuronx-distributed-inference"
    export NEURON_COMPILED_ARTIFACTS=$COMPILED_MODEL_PATH
    
    # Standard deployment (without speculative decoding)
    if [ "$ENABLE_SPECULATIVE" != "true" ]; then
        echo "Starting vLLM server (standard mode)..."
        VLLM_RPC_TIMEOUT=100000 python -m vllm.entrypoints.openai.api_server \
        --model $MODEL_PATH \
        --max-num-seqs ${MAX_NUM_SEQS:-1} \
        --max-model-len 12800 \
        --tensor-parallel-size 64 \
        --device neuron \
        --use-v2-block-manager \
        --override-neuron-config "{\"on_device_sampling_config\": {\"do_sample\": true}, \"skip_warmup\": true}" \
        --port 8000
    else
        # With speculative decoding
        echo "Starting vLLM server (speculative decoding mode)..."
        DRAFT_MODEL_PATH="/shared/models/Llama-3.2-1B-Instruct/"
        
        VLLM_RPC_TIMEOUT=100000 python -m vllm.entrypoints.openai.api_server \
        --model $MODEL_PATH \
        --max-num-seqs ${MAX_NUM_SEQS:-1} \
        --max-model-len 12800 \
        --tensor-parallel-size 64 \
        --device neuron \
        --speculative-max-model-len 12800 \
        --speculative-model $DRAFT_MODEL_PATH \
        --num-speculative-tokens 7 \
        --use-v2-block-manager \
        --override-neuron-config "{\"enable_fused_speculation\":true}" \
        --port 8000
    fi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: neuron-llama-inference
  namespace: neuron-inference
spec:
  replicas: 1
  selector:
    matchLabels:
      app: neuron-llama-inference
  template:
    metadata:
      labels:
        app: neuron-llama-inference
    spec:
      nodeSelector:
        workload-type: "neuron-inference"
        # Optional: pin to specific instance type
        node.kubernetes.io/instance-type: "trn2.48xlarge"
      tolerations:
      - key: aws.amazon.com/neuron
        operator: Exists
        effect: NoSchedule
      
      containers:
      - name: vllm-server
        image: public.ecr.aws/neuron/pytorch-inference-neuronx:2.1.2-neuronx-py310-sdk2.21.0-ubuntu20.04
        command: ["/bin/bash", "-c"]
        args:
        - |
          set -e
          
          # Setup environment
          source ~/aws_neuronx_venv_pytorch_2_5_nxd_inference/bin/activate
          cd /shared
          
          # Install vLLM if not already installed
          if [ ! -d "upstreaming-to-vllm" ]; then
            git clone -b neuron-2.24-vllm-v0.7.2 https://github.com/aws-neuron/upstreaming-to-vllm.git
            cd upstreaming-to-vllm
            pip install -r requirements-neuron.txt
            VLLM_TARGET_DEVICE="neuron" pip install -e .
            cd /shared
          fi
          
          # Start vLLM server
          exec /scripts/start_vllm.sh
          
        ports:
        - containerPort: 8000
          name: http
        resources:
          limits:
            aws.amazon.com/neuroncore: "128"
            memory: "256Gi"
            cpu: "128"
          requests:
            aws.amazon.com/neuroncore: "128"
            memory: "128Gi"
            cpu: "64"
        volumeMounts:
        - name: shared-storage
          mountPath: /shared
        - name: vllm-scripts
          mountPath: /scripts
        env:
        - name: MAX_NUM_SEQS
          value: "1"  # Batch size (1-4 supported)
        - name: ENABLE_SPECULATIVE
          value: "false"  # Set to "true" for speculative decoding
        - name: NEURON_RT_NUM_CORES
          value: "128"
        
        # Liveness and readiness probes
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 300
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 240
          periodSeconds: 10
          timeoutSeconds: 5
      
      volumes:
      - name: shared-storage
        persistentVolumeClaim:
          claimName: efs-models-pvc
      - name: vllm-scripts
        configMap:
          name: neuron-vllm-scripts
          defaultMode: 0755

---
# Service to expose the vLLM server
apiVersion: v1
kind: Service
metadata:
  name: neuron-llama-service
  namespace: neuron-inference
spec:
  selector:
    app: neuron-llama-inference
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  type: LoadBalancer